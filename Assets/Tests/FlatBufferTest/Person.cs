// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferTest
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Person : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Person GetRootAsPerson(ByteBuffer _bb) { return GetRootAsPerson(_bb, new Person()); }
  public static Person GetRootAsPerson(ByteBuffer _bb, Person obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Person __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public uint Age { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int Nums(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NumsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNumsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetNumsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetNumsArray() { return __p.__vector_as_array<int>(10); }
  public float Mons(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int MonsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetMonsBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetMonsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetMonsArray() { return __p.__vector_as_array<float>(12); }
  public double Years(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int YearsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetYearsBytes() { return __p.__vector_as_span<double>(14, 8); }
#else
  public ArraySegment<byte>? GetYearsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public double[] GetYearsArray() { return __p.__vector_as_array<double>(14); }
  public FlatBufferTest.AddressBook? Book { get { int o = __p.__offset(16); return o != 0 ? (FlatBufferTest.AddressBook?)(new FlatBufferTest.AddressBook()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<FlatBufferTest.Person> CreatePerson(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      uint age = 0,
      VectorOffset numsOffset = default(VectorOffset),
      VectorOffset monsOffset = default(VectorOffset),
      VectorOffset yearsOffset = default(VectorOffset),
      Offset<FlatBufferTest.AddressBook> bookOffset = default(Offset<FlatBufferTest.AddressBook>)) {
    builder.StartTable(7);
    Person.AddBook(builder, bookOffset);
    Person.AddYears(builder, yearsOffset);
    Person.AddMons(builder, monsOffset);
    Person.AddNums(builder, numsOffset);
    Person.AddAge(builder, age);
    Person.AddName(builder, nameOffset);
    Person.AddId(builder, id);
    return Person.EndPerson(builder);
  }

  public static void StartPerson(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddAge(FlatBufferBuilder builder, uint age) { builder.AddUint(2, age, 0); }
  public static void AddNums(FlatBufferBuilder builder, VectorOffset numsOffset) { builder.AddOffset(3, numsOffset.Value, 0); }
  public static VectorOffset CreateNumsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNumsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMons(FlatBufferBuilder builder, VectorOffset monsOffset) { builder.AddOffset(4, monsOffset.Value, 0); }
  public static VectorOffset CreateMonsVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMonsVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMonsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYears(FlatBufferBuilder builder, VectorOffset yearsOffset) { builder.AddOffset(5, yearsOffset.Value, 0); }
  public static VectorOffset CreateYearsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateYearsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartYearsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBook(FlatBufferBuilder builder, Offset<FlatBufferTest.AddressBook> bookOffset) { builder.AddOffset(6, bookOffset.Value, 0); }
  public static Offset<FlatBufferTest.Person> EndPerson(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBufferTest.Person>(o);
  }
  public static void FinishPersonBuffer(FlatBufferBuilder builder, Offset<FlatBufferTest.Person> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPersonBuffer(FlatBufferBuilder builder, Offset<FlatBufferTest.Person> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
